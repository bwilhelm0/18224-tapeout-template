--- 
project:
  source_files:
    - i8008_core.v
    - toplevel_chip.v
    - chip.sv
    - decoder.v
  top_module:  "toplevel_chip"

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "Brendan Wilhelm"      # Your name
  discord:      "Bdubs"      # Your discord handle
  title:        "Intel 8008-like"      # Project title
  description:  "This project implements the intel 8008 instruction set and microarchitecture"      # Short description of what your project does
  how_it_works: "The 8008 uses an FSM which moves through up to 3 memory read/write cycles 
                per instruction. Each memory cycle consists of up to 5 stages. T1 and T2
                output the lower 8 bits, and upper 6 bits of the memory address and two bits
                of the data access type, respectively. WAIT occurs until the READY signal
                propogates (takes 2 cycles), and then the Data_in bits are written into 
                the instruction register (CYCLE1), or read into the register file or stack.
                If it's a HALT instruction, it will move to the STOPPED state. Other
                instructions may move to the T4 and T5 states for data movement and ALU ops,
                and they may behave differently on different cycles. There is a python simulator
                which can be used to input custom instruction streams.
                The 8008 has 7 data registers, with the 0th being the accumulator, and 5th and 6th
                used for Low and High bits of data memory accesses. The stack has 8 registers
                with 14-bit width which can be pushed or popped with CAL and RET. Look over 
                the attached manual for more instructions, and the test bench for how to
                input them."      # Longer description of how the project works
  how_to_test:  "The clock speed is arbitrary, as long as there is time for instructions to
                propogate in every state. To test the project, you can look at the example
                tests in the tests/i8008_tb.py file. Or, you can run the existing tests by
                running make in the tests directory. Every cycle is simulated by the python
                simulator as the design executes, so you can update the python simulation, 
                and then call the check_state function to ensure it is in line with the 
                python simulation. I'm still working on a test bench for the final chip,
                but it will involve running a script very similar to the i8008_tb.py file
                since this handles memory management, and processor state casing already.
                I plan to upload this to the github once I finish it."      # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw:  "PLACEHOLDER"      # Describe any external hardware needed
  language:     "verilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - Data_in: 8 bits (Pins 7:0) of data with 0 being the smallest bit
    - INTR: Interrupt (Pin 8) used to exit STOPPED state
    - READY: Data ready (Pin 9) used to exit the WAIT state and input the byte to the internal bus
    - Pins 10 and 11 unused
  outputs:
    - Data_out: 8 bits (Pins 7:0) of data with 0 being the smallest bit
    - State: Outputs encoding of the processor FSM state (Pins 10:8) (T1 = 3'b010, T1I = 3'b110, T2 = 3'b100, WAIT = 3'b000, T3 = 3'b001, STOPPED = 3'b011, T4 = 3'b111, T5 = 3'b101)
    - Sync: Indicates if there is data on the Data_out pins (Pin 11)

